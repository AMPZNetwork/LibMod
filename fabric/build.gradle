import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "de.undercouch.download" version "5.5.0"
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group + '.libmod'

base {
    archivesName = project.archives_base_name
}

sourceSets {
    main.java.srcDirs = files("${parent.projectDir}/src/$project.name/main/java")
    main.resources.srcDirs = files("${parent.projectDir}/src/$project.name/main/resources")
    test.java.srcDirs = files("${parent.projectDir}/src/$project.name/test/java")
    test.resources.srcDirs = files("${parent.projectDir}/src/$project.name/test/java")
}

tasks.register('dlServerJar', Download).configure {
    src "https://meta.fabricmc.net/v2/versions/loader/1.20.1/0.15.11/1.0.1/server/jar"
    //src "https://serverjars.com/api/fetchJar/modded/fabric/${minecraft_version}"
    dest "${buildDir}/libs/server.jar"
}

tasks.register('dlFabricApi', Download).configure {
    src "https://mediafilez.forgecdn.net/files/${fabric_api_mod_cf}"
    dest "${projectDir}/run/mods/fabric-api.jar"
}

tasks.register('dlOwoLib', Download).configure {
    src "https://mediafilez.forgecdn.net/files/4573/684/owo-lib-0.11.0%2B1.20.jar"
    dest "${projectDir}/run/mods/owolib.jar"
}

tasks.register('serverJar', Copy) {
    dependsOn dlServerJar, dlFabricApi, dlOwoLib
    from dlServerJar.outputs.files.singleFile
    into "$projectDir/run"
    rename { n -> "server.jar" }
}

tasks.register('testMod', Copy) {
    dependsOn clean, remapJar
    from remapJar.outputs.files.singleFile
    into "${projectDir}/run/mods"
    rename { n -> "LibMod-fabric.jar" }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "libMod-fabric-integration" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version_fabric}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
    include(modImplementation('me.lucko:fabric-permissions-api:0.3.1'))

    implementation project("$prefix:core")
    include project("$prefix:core")

    // japi
    include project(":japi")

    include 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    include 'javax.persistence:javax.persistence-api:2.2'
    include 'net.kyori:adventure-api:4.14.0'
    include 'net.kyori:adventure-platform-fabric:5.9.0'
    implementation 'net.kyori:adventure-text-serializer-gson:4.14.0'
    include 'org.hibernate:hibernate-core:5.6.0.Final'
    include 'org.jboss:jandex:2.4.5.Final'
    include 'com.zaxxer:HikariCP:4.0.3'
    include 'com.fasterxml.jackson.core:jackson-core:2.17.2'


    include 'org.hibernate.common:hibernate-commons-annotations:5.1.2.Final'
    include 'net.java.dev.jna:jna-platform:5.13.0'
    include 'com.github.oshi:oshi-core:6.2.2'
    include 'com.zaxxer:HikariCP:4.0.3'
    include 'net.bytebuddy:byte-buddy:1.11.20'
    include 'com.google.errorprone:error_prone_annotations:2.10.0'
    include 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.1.1.Final'
    include 'javax.xml.bind:jaxb-api:2.3.1'
    include 'net.kyori:examination-string:1.3.0'
    include 'org.slf4j:slf4j-api:2.0.7'
    include 'org.jetbrains:annotations:24.1.0'
    include 'net.kyori:adventure-key:4.14.0'
    include 'javax.persistence:javax.persistence-api:2.2'
    include 'net.fabricmc:dev-launch-injector:0.2.1+build.8'
    include 'com.sun.xml.fastinfoset:FastInfoset:1.2.15'
    include 'org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0'
    include 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    include 'net.kyori:adventure-text-serializer-gson:4.14.0'
    include 'org.apache.logging.log4j:log4j-api:2.19.0'
    include 'com.fasterxml:classmate:1.5.1'
    include 'com.fasterxml.jackson.core:jackson-annotations:2.17.2'
    include 'com.fasterxml.jackson.core:jackson-core:2.17.2'
    include 'org.jvnet.staxex:stax-ex:1.8'
    include 'org.jboss:jandex:2.4.5.Final'
    include 'org.jline:jline-terminal:3.20.0'
    include 'net.kyori:adventure-text-serializer-json:4.14.0'
    include 'net.kyori:adventure-api:4.14.0'
    include 'antlr:antlr:2.7.7'
    include 'com.sun.istack:istack-commons-runtime:3.0.7'
    include 'org.glassfish.jaxb:txw2:2.3.1'
    include 'org.hibernate:hibernate-core:5.6.0.Final'
    include 'org.mariadb.jdbc:mariadb-java-client:3.4.0'
    include 'org.jboss.logging:jboss-logging:3.4.2.Final'
    include 'org.checkerframework:checker-qual:3.32.0'
    include 'net.minecrell:terminalconsoleappender:1.3.0'
    include 'net.kyori:examination-api:1.3.0'
    include 'com.github.ben-manes.caffeine:caffeine:2.9.3'
    include 'com.h2database:h2:2.2.224'
    include 'org.jline:jline-reader:3.20.0'
    include 'com.github.waffle:waffle-jna:3.3.0'
    include 'net.java.dev.jna:jna:5.13.0'
    include 'io.github.llamalad7:mixinextras-fabric:0.3.5'
    include 'blue.endless:jankson:1.2.2'
    include 'javax.activation:javax.activation-api:1.2.0'
    include 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    include 'com.mysql:mysql-connector-j:8.4.0'
    include 'com.google.protobuf:protobuf-java:3.25.1'
    include 'com.google.code.gson:gson:2.10'
    include 'org.apache.logging.log4j:log4j-core:2.19.0'
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input.set(tasks.shadowJar.archiveFile)
    addNestedDependencies.set(true)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.

        mavenLocal()
    }
}

shadowJar {
    //dependsOn project("$prefix:api").simplifyArtifact
}

task simplifyArtifact(type: Copy) {
    dependsOn test, remappedShadowJar
    from remappedShadowJar.outputs.files.singleFile
    into "$rootDir/build/libs/"
    rename { n -> "LibMod-fabric.jar" }
}
